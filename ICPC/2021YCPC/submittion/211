#pragma GCC optimize("Ofast", "unroll-loops")
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define double long double
using pii = pair<int, int>;
template<typename T>
using Prior = std::priority_queue<T>;
template<typename T>
using prior = std::priority_queue<T, vector<T>, greater<T>>;

#define X first
#define Y second
#define eb emplace_back
#define ALL(x) begin(x), end(x)
#define RALL(x) rbegin(x), rend(x)
#define fastIO() ios_base::sync_with_stdio(0), cin.tie(0)

template<typename T>
bool chmin(T &lhs, T rhs) {return lhs < rhs ? true : (lhs = rhs, false);}

template<typename T>
bool chmax(T &lhs, T rhs) {return lhs > rhs ? true : (lhs = rhs, false);}

const int INF = 1E15;
const int maxn0 = 10000 * 100 / 2 + 5;
const int maxn1 = 10000 * 100 / 2 / 2 + 5;
const int maxn2 = 10000 * 100 / 2 / 5 + 5;

bitset<maxn0> dp0;
bitset<maxn1> dp1;
bitset<maxn2> dp2;

int divceil(int a, int b) {
    return (a - 1) / b + 1;
}

void solve() {
    int N, w1, w2; cin >> N >> w1 >> w2;
    
    int sum = 0;
    vector<int> vec(N);
    for (auto &x : vec) cin >> x, sum += x;
    
    int ans = INF;
    
    if(sum<=(maxn2<<1)){
        dp2.reset(); dp2[0]=1;
        for (auto x : vec) {
            dp2 = dp2 | (dp2 << x);
        }
        for (int i = 0; i <= sum/2; ++i) {
            // cout << dp[i];
            if (dp2[i]) {
                chmin(ans, max(divceil(i, w1), divceil(sum-i, w2)));
                chmin(ans, max(divceil(i, w2), divceil(sum-i, w1)));
            }
        }
    }
    else if(sum<=(maxn1<<1)){
        dp1.reset(); dp1[0]=1;
        for (auto x : vec) {
            dp1 = dp1 | (dp1 << x);
        }
        for (int i = 0; i <= sum/2; ++i) {
            // cout << dp[i];
            if (dp1[i]) {
                chmin(ans, max(divceil(i, w1), divceil(sum-i, w2)));
                chmin(ans, max(divceil(i, w2), divceil(sum-i, w1)));
            }
        }
    }
    else{
        dp0.reset(); dp0[0]=1;
        for (auto x : vec) {
            dp0 = dp0 | (dp0 << x);
        }
        for (int i = 0; i <= sum/2; ++i) {
            // cout << dp[i];
            if (dp0[i]) {
                chmin(ans, max(divceil(i, w1), divceil(sum-i, w2)));
                chmin(ans, max(divceil(i, w2), divceil(sum-i, w1)));
            }
        }
    }
    
    cout << ans << "\n";
}

int32_t main() {
    fastIO();
    
    int t = 1; cin >> t;
    for (int _ = 1; _ <= t; ++_) {
        solve();
    }
    
    return 0;
}
